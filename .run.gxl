mod os {
  
  activity copy {
      src = "" ;
      dst = "" ;
      executer = "./_gal/mods/os/copy.sh  ${SRC} ${DST} " ;
  }
  activity path {
      dst  = "" ;
      executer = "./_gal/mods/os/path.sh  ${DST} " ;
  }
  activity ln {
      src = "" ;
      dst = "" ;
      executer = "./_gal/mods/os/link.sh  ${SRC} ${DST} " ;
  }
}
mod rust_cmd  {
  activity coverage {
      target   = "target/coverage"  ;
      executer = "./_gal/mods/coverage.sh" ;
      log  = "1";
      out  = "true" ;
  }
}
mod rust_flow  {
  flow coverage {
    rust_cmd.coverage { log = "1"; }
  }
  flow lint        {
    gx.cmd {cmd = "cargo fmt"; log = "1" ; out="true" ; }
    
    gx.cmd {cmd = "cargo fix --allow-dirty"; log = "1" ; out="true" ; }
    gx.cmd {cmd = "cargo clippy -- -D warnings";}
  }
   flow build {
    gx.cmd { forword = "cargo build  ${ENV_BUILD_FLAG} ${ENV_TARGET_FLAG} " ; }
  }
}

mod rust_env {
  env init     { build_flag  ="" ; build_name = "debug"; target_flag  = "" ; target_name = "" ; }
  env debug    {}  ;
  env release  { build_flag   =" --release" ; build_name = "release" ;  }
}
mod ver {
  flow use   {
      gx.ver { file = "${ENV_ROOT}/version.txt" ;  inc = "null" ; } 
      gx.echo { value = "current version : ${VERSION}" ; }
    }
  flow build   {
      gx.ver { file = "${ENV_ROOT}/version.txt" ;  inc = "build" ; } 
      gx.echo { value = "current version : ${VERSION}" ; }
    }
  flow patch {
      gx.ver { file = "${ENV_ROOT}/version.txt" ;  inc = "bugfix" ; }
      gx.echo { value = "current version : ${VERSION}" ; } 
    }
  flow feature {
      gx.ver { file = "${ENV_ROOT}/version.txt" ;  inc = "feature" ; }
      gx.echo { value = "current version : ${VERSION}" ; } 
    }
}

 

mod git {
  flow tag_ver  {
    gx.ver { file = "${ENV_ROOT}/version.txt" ;  inc = "null" ; }
    gx.cmd { forword = "git tag ${VERSION}" ; }
    gx.cmd { forword = "git push --tags" ; }
  }
  flow ci_ver {
    gx.ver { file = "${ENV_ROOT}/version.txt" ;  inc = "null" ; }
    gx.echo { value= "${VERSION}" ; }
    gx.cmd { forword = "git commit -a -m 'update version to ${VERSION}' " ; }
  }
}
mod  envs {
  env default {
    root = "./" ;
  }
}
mod main :  {

  #[auto_load(entry)]
  flow __into {
    main_key = "dv_example" ;
  }
  #[usage(desp="update version of patch ")]
  flow ver_patch   : ver.patch,_ver_app      { }
  #[usage(desp="update version of feature ")]
  flow ver_feature : ver.feature, _ver_app  { }
  #[usage(desp="add tag by version ")]
  flow ver_tag     : git.tag_ver ;

  #[usage(desp="update version to crates cargo.toml ")]
  flow _ver_app: ver.use {
    gx.echo { cmd = " up version: ${VERSION} to cargo.toml"; }
    gx.cmd { cmd = "cargo semver set ${VERSION}"; }
  }
  #[usage(desp="setup run depends")]
  flow setup_depends {
    gx.cmd { cmd = "cargo install cargo-semver --vers 1.0.0-alpha.3"; }
  }


}
