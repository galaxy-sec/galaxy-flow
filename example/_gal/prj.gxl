extern mod os { path= "./_gal/mods"; }
mod base_env {
    env _common {
      gx.vars {
        DOMAIN = "domain" ;
        SOCK_FILE = "socket" ;
        RG_PRJ_ROOT = "./";
      }
    }
    env cli : _common {
      ROOT   = "./";

    }
    env unit_test : _common {
      ROOT   = "./example";
    }
}
mod env : base_env {
    #[usage(desp="default")]
    env default : cli ;
    env empty {}
    env ut : unit_test  ;
}
mod base{
  mod_val = "1";
  flow define {
    base = "BASE";
  }
  #[auto_load(entry)]
  flow base_into  {
    base_begin = "BASE_INTO";
  }
  #[auto_load(exit)]
  flow base_exit {
    base_end = "BASE_EXIT";
  }
}
mod other {
  flow def{
    other_val = "OTHER_DEF";
  }
  flow def2{
    other_val = "OTHER_DEF2";
  }
}
mod main   {
  conf = "${ENV_ROOT}/conf" ;

  #[auto_load(entry)]
  flow __into : other.def ;
  #[auto_load(exit)]
  flow __exit : other.def2 ;
  #[usage(desp="main")]
  flow assert_main {
    one= "one";
    gx.assert { value = "${MAIN_CONF}" ; expect = "${ENV_ROOT}/conf"; }
    gx.assert { value = "${OTHER_VAL}" ; expect = "OTHER_DEF"; }
  }

  flow assert_parent : base.define {
    gx.assert { value = "${MAIN_CONF}" ; expect = "${ENV_ROOT}/conf"; }
    gx.assert { value = "${BASE_MOD_VAL}" ; expect = "1"; }
    gx.assert { value = "${OTHER_VAL}" ; expect = "OTHER_DEF"; }
    gx.assert { value = "${BASE}" ; expect = "BASE"; }
    gx.assert { value = "${BASE_BEGIN}" ; expect = "BASE_INTO"; }
  }

  flow conf  {
    os.path { dst = "${MAIN_CONF}/used"; keep = "true" ;}
    gx.tpl {
        tpl = "${MAIN_CONF}/tpls/nginx.conf"  ;
        dst = "${MAIN_CONF}/options/nginx.conf" ;
    }
    gx.tpl {
        tpl = "${MAIN_CONF}/tpls/test.sh"  ;
        dst = "${MAIN_CONF}/options/test.sh" ;
        data= ^"{"branchs" : [{ "name": "develop" }, { "name" : "release/1"}]}"^;
    }
    os.copy {
    src  = "${MAIN_CONF}/options/nginx.conf";
    dst  = "${MAIN_CONF}/used/nginx_ex.conf";
    }

  }
  flow commit  {
    gx.ver { file = "./version.txt" ;  inc = "bugfix" ; }
    gx.echo { value= "${VERSION}" ; }
  }
  flow default : conf , commit ;

}
