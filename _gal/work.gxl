extern mod head { path = "${GXL_START_ROOT}/_gal/"; }

mod env  {
   env _common  : rust_env.init   {
    root      = ".";
    target_name = "";
    prj_key   = "galaxy_flow" ;
    DIST_REPO = "unknow";
    AFT_PREFIX = "g";

  }

  #[usage(desp="use debug ",color="blue")]
  env debug :  _common,rust_env.debug {
    AFT_PREFIX = "d" ;
  }
  #[usage(desp="use debug ",color="blue")]
  env release :  _common,rust_env.release{
    AFT_PREFIX = "g" ;
  }


  #[usage(desp="default mamcos", color="green")]
  env default    : _common,debug;
}

mod main   {
      bld_bins = "target/${ENV_BUILD_NAME}" ;
      rls_bins = "target/release" ;
      HOME_BIN = "${HOME}/bin" ;

    #[auto_load(entry)]
    flow __into  {
        DIST_REPO = "unkonw";
        gx.echo ( value: "${GXL_OS_SYS}" )
        if ${GXL_OS_SYS} =* "arm64_macos_*" {
            DIST_REPO = "macos";
        } else if ${GXL_OS_SYS} =* "x86_64_ubuntu*" {
            DIST_REPO = "ubuntu22";
        }
        else {
            DIST_REPO = "other";
        }

    }
    #[task(name="config")]
    flow conf  {

      gx.echo ( "HOME_BIN : ${MAIN_HOME_BIN} " );

      gx.echo (  "ENV_BUILD_FLAG :  ${ENV_BUILD_FLAG}  " );
      gx.echo (  "ENV_TARGET_FLAG : ${ENV_TARGET_FLAG} " );
    }


  #[usage(desp="use project cargo conf")]
  flow cargo_env {
    gx.cmd  ( cmd : "cp -f build/cargo.conf $CARGO_HOME/config" );
  }
  flow coverage : rust_flow.coverage ;

  #[task(name="build")]
  flow build: ver.use ,conf , rust_flow.build : pub_local {
      os.path (  "${MAIN_HOME_BIN}" );
  }
  #[usage(desp="lint code")]
  flow lint | rust_flow.lint {} ;

  #[task(name="test")]
  flow build |  @test  {
    gx.cmd ( "cargo test --all ${ENV_BUILD_FLAG}", log : "1" , out:"true"  );
  }
  flow  main.build | @sys_test {
    gx.cmd ( "cargo test --test sys_tests  --all-features  ${ENV_BUILD_FLAG}", log : "1" , out:"true"  );
  }

  flow debug_ut  {
    gx.cmd ( "RUST_LOG=debug cargo test ${GXL_CMD_ARG} -- --nocapture ", log : "1" , out:"true"  );
  }

  flow pub_local   {

    AP = "${ENV_AFT_PREFIX}";
    gx.cmd (  "mkdir -p ${MAIN_HOME_BIN}" );
    gx.cmd (  "cp ${MAIN_BLD_BINS}/gflow ${MAIN_HOME_BIN}/${AP}flow"  );
    gx.cmd (  "cp ${MAIN_BLD_BINS}/gprj ${MAIN_HOME_BIN}/${AP}prj"  );
  }
  flow _pub_gflow | _pub_dysec {
    UP_TARGET = "gflow";
  }
  flow _pub_gprj | _pub_dysec {
    UP_TARGET = "gprj";
  }

  flow pub_dysec  | _pub_gflow | _pub_gprj ;

  flow ver.use | @_pub_dysec {
    gx.echo (  "pub ${UP_TARGET} to dysec " );
    gx.upload (
        url : "https://dy-sec-generic.pkg.coding.net/galaxy-open/${DIST_REPO}/${UP_TARGET}?version=${VERSION}",
        username : "${SEC_GFLOW_LOGIN}",
        method : "PUT",
        password : "${SEC_GFLOW_PASSWORD}",
        local_file : "./${MAIN_RLS_BINS}/${UP_TARGET}"
    );
    gx.upload (
        url : "https://dy-sec-generic.pkg.coding.net/galaxy-open/${DIST_REPO}/${UP_TARGET}_latest_version.txt?version=latest",
        username : "${SEC_GFLOW_LOGIN}",
        method : "PUT",
        password : "${SEC_GFLOW_PASSWORD}",
        local_file : "./version.txt"
    );
  }
}
